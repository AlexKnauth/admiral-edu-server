#lang racket/base

(require racket/string
         racket/list
         racket/match
         racket/contract
         web-server/http/bindings
         web-server/templates
         web-server/http/response-structs
         xml
         json
         yaml)

(require "../storage/storage.rkt"
         "../base.rkt"
         (prefix-in error: "errors.rkt")
         "../authoring/assignment.rkt"
         "../temporary-hacks.rkt")

(define NEW-ACTION "new")
(define EDIT-ACTION "edit")
(define VALIDATE-ACTION "validate")
(define VALIDATE-AND-SAVE-ACTION "validate-save")

(define warning-message
  (string-join 
   '("<p><b>Warning:</b> You are editing an existing assignment."
     "In general it is safe to change instructions and add steps."
     "However, if students have started this assignment, changing ids"
     "and rubric structures may cause inconsistencies in the exported"
     "assignment data.</p>")))

(provide (contract-out
          [load (->* (ct-session? any/c any/c) (any/c) (or/c response? xexpr?))]))

;; allow user to create or edit an assignment
(define (load session role rest [message '()])
  (when (not (roles:Record-can-edit role))
    (raise-403-not-authorized))
  ;; FIXME ad-hoc url parsing
  (define len (length rest))
  (define action (if (= 0 len) NEW-ACTION (car rest)))
  (cond [(equal? NEW-ACTION action) (authoring session role rest "")]
        [(equal? EDIT-ACTION action) (edit session role (cdr rest) warning-message)]
        [else (raise-400-bad-request)]))

(define (authoring session role rest [message '()])
  (page session role rest message "" (string-append "'" VALIDATE-ACTION "'") "test"))

(define (edit session role rest [message '()])
  (when (< (length rest) 1)
    (raise-404-not-found "Invalid URL. Expected /author/edit/assignment-id/"))
  (let ((assignment-id (car rest)))
    (when (not (assignment:exists? assignment-id (class-name)))
      (raise-404-not-found (string-append "No such assignment: " assignment-id)))
    (let* ((contents (retrieve-assignment-description (class-name) assignment-id)))
      (page session role rest message contents (string-append "'" VALIDATE-AND-SAVE-ACTION "'") "test"))))

(define (page session role rest message contents validate load)
  (let* ([save-url validate]
         [load-url load]
         [class-name (class-name)])
    (string-append (include-template "html/authoring-header.html")
                   contents
                   (include-template "html/authoring-footer.html"))))



(provide post->validate)
(define (post->validate session post-data rest-of-path)
  (match rest-of-path
    ;; FIXME: can we tighten up this pattern? what are the legal shapes?
    ;; FIXME: looks like the path *used* to be used to determine the name
    ;; of the saved assignment, but can just be deduced from the file name.
    ;; probably there shouldn't be any difference between validate and validate-and-save?
    ;; or maybe there are subtle bugs when you go to edit one and change the assignment
    ;; id? Maybe the create? boolean is enough to protect sanity?
    ;;
    ;; best way to fix this is probably to get a handle on all of the URLS
    ;; that are generated by the app itself.
    [(list _ ... (? string? action))
     (cond [(equal? VALIDATE-ACTION action) (validate session post-data #t)]
           [(equal? VALIDATE-AND-SAVE-ACTION action) (validate session post-data #f)]
           [else (raise-404-not-found)])]
    [else (raise-404-not-found)]))

;; ensure the assignment is valid, add or overwrite, indicate
;; success.
(define (validate session post-data create?)
  (let ((result (match (yaml-bytes->create-or-save-assignment post-data create?)
                  [(Success _) "Success"]
                  [(Failure msg) msg])))
    ;; FIXME change strings to xexprs, just return them
    (response/full
     200 #"Okay"
     (current-seconds) #"application/json; charset=utf-8"
     empty
     (list (string->bytes/utf-8 result)))))

  
